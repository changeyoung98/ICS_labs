                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #Chen Zhiyang 516030910347
                            | # Describe how and why you modified the baseline code.
                            | #1.Use loop unrolling by a step of 8 to both improve CPE and satisfy the limit of bytes
                            | #2.Use jump table to deal with the rest(I tried to reuse the codes in loop , but some instructions can't be reduced)
                            | #3.Move the check for 0 at the header to jump table to achieve better average score(in this way, though there are more cycles for 0,cycles for others are reduced) 
                            | #4.In the loops, rearrange the mrmovq(put several together) to reduce load/use penalty 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x000: 6300                 |         xorq %rax,%rax          # count = 0;
                            | #        iaddq $-1,%rdx
                            |  #       jl Done
                            |   #      mrmovq (%rdi), %r11     # read val from src...
                            |    #     iaddq $8,%rdi
                            |     #    rmmovq %r11, (%rsi)     # ...and store it to dst
                            |      #   iaddq $8,%rsi
                            |       #  andq %r11, %r11         # val <= 0?
                            |        # jle Lo                # if so, goto Npos:
                            |        # iaddq $1, %rax         # count++    
0x002: c0f2f6ffffffffffffff |          iaddq $-10,%rdx
                            |        # andq %rdx,%rdx          # len <= 0?
0x00c: 72d601000000000000   |          jl Less                # if so, goto Loop:
                            | 
                            | #Loop1:   mrmovq 120(%rdi), %r10	# read val from src...
                            |        # mrmovq 112(%rdi), %r9     # read val from src...
                            |        # mrmovq 104(%rdi), %r8     # read val from src...
                            | #	andq %r10, %r10		# val <= 0?
                            |  #       rmmovq %r10, 120(%rsi)     # ...and store it to dst
                            |        # mrmovq 96(%rdi), %r11     # read val from src...
                            | #	jle Loop2		# if so, goto Npos:
                            | #	iaddq $1, %rax		# count++
                            | #Loop2:  mrmovq 112(%rdi), %r9     # read val from src...
                            |  #       andq %r9, %r9         # val <= 0?
                            |   #      rmmovq %r9, 112(%rsi)     # ...and store it to dst
                            |    #     jle Loop3                # if so, goto Npos:
                            |     #    iaddq $1, %rax         # count++
                            | #Loop3:  mrmovq 104(%rdi), %r8     # read val from src...
                            |  #       andq %r8, %r8         # val <= 0?
                            |   #      rmmovq %r8, 104(%rsi)     # ...and store it to dst
                            |    #     jle Loop4               # if so, goto Npos:
                            |     #    iaddq $1, %rax          # count++ 
                            | #Loop4:  mrmovq 96(%rdi), %r11     # read val from src...
                            |  #       andq %r11, %r11         # val <= 0?
                            |   #      rmmovq %r11, 96(%rsi)     # ...and store it to dst
                            |    #     jle Loop5                # if so, goto Npos:
                            |     #    iaddq $1, %rax         # count++
                            | #Loop5:   mrmovq 88(%rdi), %r8     # read val from src...
                            |  #      # mrmovq 80(%rdi), %r9     # read val from src...
                            |   #      #  mrmovq 72(%rdi), %r10     # read val from src...
                            |    #    # iaddq $16, %rdi         # src++  #mov from else where
                            |     #    andq %r8, %r8         # val <= 0?
                            |      #   rmmovq %r8, 88(%rsi)     # ...and store it to dst
                            |        # mrmovq 64(%rdi), %r11     # read val from src...
                            |        # jle Loop6               # if so, goto Npos:
                            |       #  iaddq $1, %rax          # count++ 
                            | #Loop6:  mrmovq 80(%rdi), %r9     # read val from src...
                            |  #       andq %r9, %r9         # val <= 0?
                            |   #      rmmovq %r9, 80(%rsi)     # ...and store it to dst
                            |    #     jle Loop7                # if so, goto Npos:
                            |     #    iaddq $1, %rax         # count++
0x015: 50a74800000000000000 | Loop7:   mrmovq 72(%rdi), %r10     # read val from src...
0x01f: 50b74000000000000000 |         mrmovq 64(%rdi), %r11
                            |         #iaddq $16, %rdi         # src++  #mov from else where
0x029: 62aa                 |         andq %r10, %r10         # val <= 0?
0x02b: 40a64800000000000000 |         rmmovq %r10, 72(%rsi)     # ...and store it to dst
0x035: 714800000000000000   |         jle Loop8               # if so, goto Npos:
0x03e: c0f00100000000000000 |         iaddq $1, %rax          # count++ 
0x048:                      | Loop8: # mrmovq 64(%rdi), %r11     # read val from src...
0x048: 62bb                 |         andq %r11, %r11         # val <= 0?
0x04a: 40b64000000000000000 |         rmmovq %r11, 64(%rsi)     # ...and store it to dst
0x054: 716700000000000000   |         jle Loop9                # if so, goto Npos:
0x05d: c0f00100000000000000 |         iaddq $1, %rax         # count++
0x067: 50873800000000000000 | Loop9:   mrmovq 56(%rdi), %r8     # read val from src...
0x071: 50973000000000000000 |         mrmovq 48(%rdi), %r9     # read val from src...
0x07b: 50a72800000000000000 |         mrmovq 40(%rdi), %r10     # read val from src...
0x085: 6288                 |         andq %r8, %r8         # val <= 0?
0x087: 40863800000000000000 |         rmmovq %r8, 56(%rsi)     # ...and store it to dst
0x091: 50b72000000000000000 |         mrmovq 32(%rdi), %r11     # read val from src...
0x09b: 71ae00000000000000   |         jle Loop10               # if so, goto
0x0a4: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x0ae:                      | Loop10:# mrmovq 48(%rdi), %r9     # read val from src...
0x0ae: 6299                 |         andq %r9, %r9         # val <= 0?
0x0b0: 40963000000000000000 |         rmmovq %r9, 48(%rsi)     # ...and store it to dst
0x0ba: 71cd00000000000000   |         jle Loop11                # if so, goto Npos:
0x0c3: c0f00100000000000000 |         iaddq $1, %rax         # count++
0x0cd:                      | Loop11: #mrmovq 40(%rdi), %r10     # read val from src...
                            |         #iaddq $16, %rdi         # src++  #mov from else where
0x0cd: 62aa                 |         andq %r10, %r10         # val <= 0?
0x0cf: 40a62800000000000000 |         rmmovq %r10, 40(%rsi)     # ...and store it to dst
0x0d9: 71ec00000000000000   |         jle Loop12               # if so, goto Npos:
0x0e2: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x0ec:                      | Loop12: #mrmovq 32(%rdi), %r11     # read val from src...
0x0ec: 62bb                 |         andq %r11, %r11         # val <= 0?
0x0ee: 40b62000000000000000 |         rmmovq %r11, 32(%rsi)     # ...and store it to dst
0x0f8: 710b01000000000000   |         jle Loop13                # if so, goto Npos:
0x101: c0f00100000000000000 |         iaddq $1, %rax         # count++
0x10b: 50871800000000000000 | Loop13:   mrmovq 24(%rdi), %r8     # read val from src...
0x115: 50971000000000000000 |         mrmovq 16(%rdi), %r9     # read val from src...
0x11f: 50a70800000000000000 |           mrmovq 8(%rdi), %r10     # read val from src...
                            |        # iaddq $16, %rdi         # src++  #mov from else where
0x129: 6288                 |         andq %r8, %r8         # val <= 0?
0x12b: 40861800000000000000 |         rmmovq %r8, 24(%rsi)     # ...and store it to dst
0x135: 50b70000000000000000 |         mrmovq (%rdi), %r11     # read val from src...
0x13f: 715201000000000000   |         jle Loop14               # if so, goto Npos:
0x148: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x152:                      | Loop14:# mrmovq 16(%rdi), %r9     # read val from src...
0x152: 6299                 |         andq %r9, %r9         # val <= 0?
0x154: 40961000000000000000 |         rmmovq %r9, 16(%rsi)     # ...and store it to dst
0x15e: 717101000000000000   |         jle Loop15                # if so, goto Npos:
0x167: c0f00100000000000000 |         iaddq $1, %rax         # count++
0x171:                      | Loop15: #mrmovq 8(%rdi), %r10     # read val from src...
                            |         #iaddq $16, %rdi         # src++  #mov from else where
0x171: 62aa                 |         andq %r10, %r10         # val <= 0?
0x173: 40a60800000000000000 |         rmmovq %r10, 8(%rsi)     # ...and store it to dst
0x17d: 719001000000000000   |         jle Loop16               # if so, goto Npos:
0x186: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x190:                      | Loop16: #mrmovq (%rdi), %r11     # read val from src... 
0x190: 62bb                 |         andq %r11, %r11         # val <= 0?
0x192: 40b60000000000000000 |         rmmovq %r11, (%rsi)     # ...and store it to dst
0x19c: 71af01000000000000   |         jle Npos                # if so, goto Npos:
0x1a5: c0f00100000000000000 |         iaddq $1, %rax         # count++
                            | 
0x1af:                      | Npos:  # andq %rdx,%rdx
                            |         #je Done
0x1af: c0f75000000000000000 |         iaddq $80, %rdi
0x1b9: c0f65000000000000000 |         iaddq $80, %rsi         # dst++ #move from that
                            | 
0x1c3: c0f2f6ffffffffffffff |         iaddq $-10,%rdx
                            |         #andq %rdx,%rdx          # len <= 0?
0x1cd: 751500000000000000   |         jge Loop7                # if so, goto Loop:
0x1d6: 6022                 | Less:   addq %rdx,%rdx
0x1d8: 6022                 |         addq %rdx,%rdx
0x1da: 6022                 |         addq %rdx,%rdx
0x1dc: 5022b803000000000000 |         mrmovq JT(%rdx),%rdx
0x1e6: a02f                 |         pushq %rdx
                            |       #  irmovq $0,%rdx
0x1e8: 90                   |         ret
0x1e9:                      | T000:#   mrmovq 72(%rdi), %r10
                            |  #       andq %r10,%r10
                            |   #      rmmovq %r10,72(%rsi)
                            |    #     jle T00
                            |     #    iaddq $1, %rax
0x1e9: 50a74000000000000000 | T00:    mrmovq 64(%rdi), %r10
0x1f3: 62aa                 |         andq %r10,%r10
0x1f5: 40a64000000000000000 |         rmmovq %r10, 64(%rsi)
0x1ff: 711202000000000000   |         jle T0
0x208: c0f00100000000000000 |         iaddq $1, %rax
                            | 
0x212: 50a73800000000000000 | T0:     mrmovq 56(%rdi), %r10
0x21c: 62aa                 |         andq %r10,%r10
0x21e: 40a63800000000000000 |         rmmovq %r10, 56(%rsi)
0x228: 713b02000000000000   |         jle T1
0x231: c0f00100000000000000 |         iaddq $1, %rax
                            |         
0x23b: 50a73000000000000000 | T1:     mrmovq 48(%rdi), %r10
0x245: 62aa                 |         andq %r10,%r10
0x247: 40a63000000000000000 |         rmmovq %r10, 48(%rsi)
0x251: 716402000000000000   |         jle T2
0x25a: c0f00100000000000000 |         iaddq $1, %rax
0x264: 50a72800000000000000 | T2:     mrmovq 40(%rdi),%r10
0x26e: 62aa                 |         andq %r10,%r10
0x270: 40a62800000000000000 |         rmmovq %r10, 40(%rsi)
0x27a: 718d02000000000000   |         jle T3
0x283: c0f00100000000000000 |         iaddq $1, %rax 
0x28d: 50a72000000000000000 | T3:     mrmovq 32(%rdi), %r10
0x297: 62aa                 |         andq %r10,%r10
0x299: 40a62000000000000000 |         rmmovq %r10, 32(%rsi)
0x2a3: 71b602000000000000   |         jle T4
0x2ac: c0f00100000000000000 |         iaddq $1, %rax
0x2b6: 50a71800000000000000 | T4:     mrmovq 24(%rdi), %r10
0x2c0: 62aa                 |         andq %r10,%r10
0x2c2: 40a61800000000000000 |         rmmovq %r10, 24(%rsi)
0x2cc: 71df02000000000000   |         jle T5
0x2d5: c0f00100000000000000 |         iaddq $1, %rax
0x2df: 50971000000000000000 | T5:     mrmovq 16(%rdi), %r9
0x2e9: 6299                 |         andq %r9,%r9
0x2eb: 40961000000000000000 |         rmmovq %r9, 16(%rsi)
0x2f5: 710803000000000000   |         jle T6
0x2fe: c0f00100000000000000 |         iaddq $1, %rax
0x308: 50a70800000000000000 | T6:     mrmovq 8(%rdi), %r10
0x312: 62aa                 |         andq %r10,%r10
0x314: 40a60800000000000000 |         rmmovq %r10, 8(%rsi)
0x31e: 713103000000000000   |         jle T7
0x327: c0f00100000000000000 |         iaddq $1, %rax
0x331: 50a70000000000000000 | T7:     mrmovq (%rdi), %r10
0x33b: 62aa                 |         andq %r10,%r10
0x33d: 40a60000000000000000 |         rmmovq %r10, (%rsi)
0x347: 71c003000000000000   |         jle Done
0x350: c0f00100000000000000 |         iaddq $1, %rax
0x35a: 70c003000000000000   |         jmp Done
                            | 
0x368:                      | .align 8
                            | #     .quad Loop16
                            |  #    .quad Loop15
                            |   #   .quad Loop14
                            |    #  .quad Loop13
                            | #     .quad Loop12
                            |  #    .quad Loop11
                            |   #   .quad Loop10
                            |    #  .quad Loop9
0x368: c003000000000000     |      .quad Done
0x370: 3103000000000000     |      .quad T7
0x378: 0803000000000000     |      .quad T6
0x380: df02000000000000     |      .quad T5
0x388: b602000000000000     |      .quad T4
0x390: 8d02000000000000     |      .quad T3
0x398: 6402000000000000     |      .quad T2
0x3a0: 3b02000000000000     |      .quad T1
0x3a8: 1202000000000000     |      .quad T0
0x3b0: e901000000000000     |      .quad T00
0x3b8: e901000000000000     | JT:  .quad T000
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3c0:                      | Done:
0x3c0: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3c1:                      | End:
                            | #/* $end ncopy-ys */
