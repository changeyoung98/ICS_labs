                            | #######################################################################
                            | # Test for copying block of size 64;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4000a000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f24000000000000000 | 	irmovq $64, %rdx		# src and dst have 64 elements
0x014: 30f67807000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76005000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80f903000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #Chen Zhiyang 516030910347
                            | # Describe how and why you modified the baseline code.
                            | #1.Use loop unrolling by a step of 10 to both improve CPE and satisfy the limit of bytes
                            | #2.Use jump table to deal with the rest(I tried to reuse the codes in loop , but some instructions can't be reduced)
                            | #3.Move the check for 0 at the header to jump table to achieve better average score(in this way, though there are more cycles for 0,cycles for others are reduced) 
                            | #4.In the loops, rearrange the mrmovq(put several together) to reduce load/use penalty
                            | #5.Use new function iaddq to reduce cycles
                            | #6.Rearrange conditional jumps to jump more correctly
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x03b: 6300                 |          xorq %rax,%rax  
0x03d: c0f2f6ffffffffffffff |          iaddq $-10,%rdx
                            |         #andq %rdx,%rdx          # len <= 0?
0x047: 721102000000000000   |          jl Less                # if so, goto Loop:
                            | 
0x050: 50a74800000000000000 | Loop7:   mrmovq 72(%rdi), %r10     # read val from src...
0x05a: 50b74000000000000000 |         mrmovq 64(%rdi), %r11
0x064: 50873800000000000000 |         mrmovq 56(%rdi), %r8
0x06e: 40a64800000000000000 |         rmmovq %r10, 72(%rsi)     # ...and store it to dst
0x078: 62aa                 |         andq %r10, %r10
0x07a: 718d00000000000000   |         jle Loop8               # if so, goto Npos:
0x083: c0f00100000000000000 |         iaddq $1, %rax          # count++ 
0x08d:                      | Loop8: # mrmovq 64(%rdi), %r11     # read val from src...
0x08d: 40b64000000000000000 |         rmmovq %r11, 64(%rsi)     # ...and store it to dst
0x097: 62bb                 |         andq %r11, %r11         # val <= 0?
0x099: 71ac00000000000000   |         jle Loop9                # if so, goto Npos:
0x0a2: c0f00100000000000000 |         iaddq $1, %rax         # count++
0x0ac:                      | Loop9:  # mrmovq 56(%rdi), %r8     # read val from src...
0x0ac: 50973000000000000000 |         mrmovq 48(%rdi), %r9     # read val from src...
0x0b6: 50a72800000000000000 |         mrmovq 40(%rdi), %r10     # read val from src...
0x0c0: 40863800000000000000 |         rmmovq %r8, 56(%rsi)     # ...and store it to dst
0x0ca: 50b72000000000000000 |         mrmovq 32(%rdi), %r11     # read val from src...
0x0d4: 6288                 |         andq %r8, %r8         # val <= 0?
0x0d6: 71e900000000000000   |         jle Loop10               # if so, goto
0x0df: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x0e9:                      | Loop10:# mrmovq 48(%rdi), %r9     # read val from src...
0x0e9: 40963000000000000000 |         rmmovq %r9, 48(%rsi)     # ...and store it to dst
0x0f3: 6299                 |         andq %r9, %r9         # val <= 0?
0x0f5: 710801000000000000   |         jle Loop11                # if so, goto Npos:
0x0fe: c0f00100000000000000 |         iaddq $1, %rax         # count++
0x108:                      | Loop11: #mrmovq 40(%rdi), %r10     # read val from src...
                            |         #iaddq $16, %rdi         # src++  #mov from else where
0x108: 40a62800000000000000 |         rmmovq %r10, 40(%rsi)     # ...and store it to dst
0x112: 62aa                 |         andq %r10, %r10         # val <= 0?
0x114: 712701000000000000   |         jle Loop12               # if so, goto Npos:
0x11d: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x127:                      | Loop12: #mrmovq 32(%rdi), %r11     # read val from src...
0x127: 40b62000000000000000 |         rmmovq %r11, 32(%rsi)     # ...and store it to dst
0x131: 62bb                 |         andq %r11, %r11         # val <= 0?
0x133: 714601000000000000   |         jle Loop13                # if so, goto Npos:
0x13c: c0f00100000000000000 |         iaddq $1, %rax         # count++
0x146: 50871800000000000000 | Loop13:   mrmovq 24(%rdi), %r8     # read val from src...
0x150: 50971000000000000000 |         mrmovq 16(%rdi), %r9     # read val  from src...
0x15a: 50a70800000000000000 |           mrmovq 8(%rdi), %r10     # read val from src...
                            |        # iaddq $16, %rdi         # src++  #mov from else where
0x164: 40861800000000000000 |         rmmovq %r8, 24(%rsi)     # ...and store it to dst
0x16e: 50b70000000000000000 |         mrmovq (%rdi), %r11     # read val from src...
0x178: 6288                 |         andq %r8, %r8         # val <= 0?
0x17a: 718d01000000000000   |         jle Loop14               # if so, goto Npos:
0x183: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x18d:                      | Loop14:# mrmovq 16(%rdi), %r9     # read val from src... 
0x18d: 40961000000000000000 |         rmmovq %r9, 16(%rsi)     # ...and store it to dst
0x197: 6299                 |         andq %r9, %r9         # val <= 0?
0x199: 71ac01000000000000   |         jle Loop15                # if so, goto Npos:
0x1a2: c0f00100000000000000 |         iaddq $1, %rax         # count++
0x1ac:                      | Loop15: #mrmovq 8(%rdi), %r10     # read val from src...
                            |         #iaddq $16, %rdi         # src++  #mov from else where
0x1ac: 40a60800000000000000 |         rmmovq %r10, 8(%rsi)     # ...and store it to dst
0x1b6: 62aa                 |         andq %r10, %r10         # val <= 0?
0x1b8: 71cb01000000000000   |         jle Loop16               # if so, goto Npos:
0x1c1: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x1cb:                      | Loop16: #mrmovq (%rdi), %r11     # read val from src...
0x1cb: 40b60000000000000000 |         rmmovq %r11, (%rsi)     # ...and store it to dst
0x1d5: 62bb                 |         andq %r11, %r11         # val <= 0?
0x1d7: 71ea01000000000000   |         jle Npos                # if so, goto Npos:
0x1e0: c0f00100000000000000 |         iaddq $1, %rax         # count++
                            | 
0x1ea:                      | Npos:  
0x1ea: c0f75000000000000000 |         iaddq $80, %rdi
0x1f4: c0f65000000000000000 |         iaddq $80, %rsi         # dst++ #move from that
                            | 
0x1fe: c0f2f6ffffffffffffff |         iaddq $-10,%rdx
                            |         #andq %rdx,%rdx          # len <= 0?
0x208: 755000000000000000   |         jge Loop7                # if so, goto Loop:
0x211: 6022                 | Less:   addq %rdx,%rdx
0x213: 6022                 |         addq %rdx,%rdx
0x215: 6022                 |         addq %rdx,%rdx
0x217: 5022f003000000000000 |         mrmovq JT(%rdx),%rdx
0x221: a02f                 |         pushq %rdx
0x223: 90                   |         ret
0x224:                      | T000:
                            | 
0x224: 50a74000000000000000 | T00:    mrmovq 64(%rdi), %r10
0x22e: 40a64000000000000000 |         rmmovq %r10, 64(%rsi)
0x238: 62aa                 |         andq %r10,%r10
0x23a: 714d02000000000000   |         jle T0
0x243: c0f00100000000000000 |         iaddq $1, %rax
                            | 
0x24d: 50a73800000000000000 | T0:     mrmovq 56(%rdi), %r10
0x257: 40a63800000000000000 |         rmmovq %r10, 56(%rsi)
0x261: 62aa                 |         andq %r10,%r10
0x263: 717602000000000000   |         jle T1
0x26c: c0f00100000000000000 |         iaddq $1, %rax
                            |         
0x276: 50a73000000000000000 | T1:     mrmovq 48(%rdi), %r10
0x280: 40a63000000000000000 |         rmmovq %r10, 48(%rsi)
0x28a: 62aa                 |         andq %r10,%r10
0x28c: 719f02000000000000   |         jle T2
0x295: c0f00100000000000000 |         iaddq $1, %rax
0x29f: 50a72800000000000000 | T2:     mrmovq 40(%rdi),%r10
0x2a9: 40a62800000000000000 |         rmmovq %r10, 40(%rsi)
0x2b3: 62aa                 |         andq %r10,%r10
0x2b5: 71c802000000000000   |         jle T3
0x2be: c0f00100000000000000 |         iaddq $1, %rax 
0x2c8: 50a72000000000000000 | T3:     mrmovq 32(%rdi), %r10
0x2d2: 40a62000000000000000 |         rmmovq %r10, 32(%rsi)
0x2dc: 62aa                 |         andq %r10,%r10
0x2de: 71f102000000000000   |         jle T4
0x2e7: c0f00100000000000000 |         iaddq $1, %rax
0x2f1: 50a71800000000000000 | T4:     mrmovq 24(%rdi), %r10
0x2fb: 40a61800000000000000 |         rmmovq %r10, 24(%rsi)
0x305: 62aa                 |         andq %r10,%r10
0x307: 711a03000000000000   |         jle T5
0x310: c0f00100000000000000 |         iaddq $1, %rax
0x31a: 50971000000000000000 | T5:     mrmovq 16(%rdi), %r9
0x324: 40961000000000000000 |         rmmovq %r9, 16(%rsi)
0x32e: 6299                 |         andq %r9,%r9
0x330: 714303000000000000   |         jle T6
0x339: c0f00100000000000000 |         iaddq $1, %rax
0x343: 50a70800000000000000 | T6:     mrmovq 8(%rdi), %r10
0x34d: 40a60800000000000000 |         rmmovq %r10, 8(%rsi)
0x357: 62aa                 |         andq %r10,%r10
0x359: 716c03000000000000   |         jle T7
0x362: c0f00100000000000000 |         iaddq $1, %rax
0x36c: 50a70000000000000000 | T7:     mrmovq (%rdi), %r10
0x376: 40a60000000000000000 |         rmmovq %r10, (%rsi)
0x380: 62aa                 |         andq %r10,%r10
0x382: 71f803000000000000   |         jle Done
0x38b: c0f00100000000000000 |         iaddq $1, %rax
0x395: 70f803000000000000   |         jmp Done
                            | 
0x3a0:                      | .align 8
0x3a0: f803000000000000     |      .quad Done
0x3a8: 6c03000000000000     |      .quad T7
0x3b0: 4303000000000000     |      .quad T6
0x3b8: 1a03000000000000     |      .quad T5
0x3c0: f102000000000000     |      .quad T4
0x3c8: c802000000000000     |      .quad T3
0x3d0: 9f02000000000000     |      .quad T2
0x3d8: 7602000000000000     |      .quad T1
0x3e0: 4d02000000000000     |      .quad T0
0x3e8: 2402000000000000     |      .quad T00
0x3f0: f803000000000000     | JT:  .quad Done
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3f8:                      | Done:
0x3f8: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3f9:                      | End:
                            | #/* $end ncopy-ys */
0x3f9:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 36.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x3f9:                      | check:
                            | 	# Return value test
0x3f9: 30fa2400000000000000 | 	irmovq $36,%r10
0x403: 61a0                 | 	subq %r10,%rax
0x405: 732104000000000000   | 	je checkb
0x40e: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x418: 705f05000000000000   | 	jmp cdone
0x421:                      | checkb:
                            | 	# Code length check
0x421: 30f0f903000000000000 | 	irmovq EndFun,%rax
0x42b: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x435: 6120                 | 	subq %rdx,%rax
0x437: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x441: 6102                 | 	subq %rax,%rdx
0x443: 755f04000000000000   | 	jge checkm
0x44c: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x456: 705f05000000000000   | 	jmp cdone
0x45f:                      | checkm:
0x45f: 30f27807000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x469: 30f36005000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x473: 30f74000000000000000 | 	irmovq $64,%rdi  # Count
0x47d: 6277                 | 	andq %rdi,%rdi
0x47f: 73dd04000000000000   | 	je checkpre         # Skip check if count = 0
0x488:                      | mcloop:
0x488: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x492: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x49c: 6160                 | 	subq %rsi,%rax
0x49e: 73ba04000000000000   | 	je  mok
0x4a7: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x4b1: 705f05000000000000   | 	jmp cdone
0x4ba:                      | mok:
0x4ba: 30f00800000000000000 | 	irmovq $8,%rax
0x4c4: 6002                 | 	addq %rax,%rdx	  # dest ++
0x4c6: 6003                 | 	addq %rax,%rbx    # src++
0x4c8: 30f00100000000000000 | 	irmovq $1,%rax
0x4d2: 6107                 | 	subq %rax,%rdi    # cnt--
0x4d4: 768804000000000000   | 	jg mcloop
0x4dd:                      | checkpre:
                            | 	# Check for corruption
0x4dd: 30f27007000000000000 | 	irmovq Predest,%rdx
0x4e7: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x4f1: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x4fb: 6120                 | 	subq %rdx,%rax
0x4fd: 731905000000000000   | 	je checkpost
0x506: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x510: 705f05000000000000   | 	jmp cdone
0x519:                      | checkpost:
                            | 	# Check for corruption
0x519: 30f27809000000000000 | 	irmovq Postdest,%rdx
0x523: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x52d: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x537: 6120                 | 	subq %rdx,%rax
0x539: 735505000000000000   | 	je checkok
0x542: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x54c: 705f05000000000000   | 	jmp cdone
0x555:                      | checkok:
                            | 	# Successful checks
0x555: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x55f:                      | cdone:
0x55f: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x560:                      | 	.align 8
0x560:                      | src:
0x560: 0100000000000000     | 	.quad 1
0x568: 0200000000000000     | 	.quad 2
0x570: 0300000000000000     | 	.quad 3
0x578: fcffffffffffffff     | 	.quad -4
0x580: fbffffffffffffff     | 	.quad -5
0x588: faffffffffffffff     | 	.quad -6
0x590: 0700000000000000     | 	.quad 7
0x598: 0800000000000000     | 	.quad 8
0x5a0: 0900000000000000     | 	.quad 9
0x5a8: 0a00000000000000     | 	.quad 10
0x5b0: 0b00000000000000     | 	.quad 11
0x5b8: 0c00000000000000     | 	.quad 12
0x5c0: f3ffffffffffffff     | 	.quad -13
0x5c8: f2ffffffffffffff     | 	.quad -14
0x5d0: f1ffffffffffffff     | 	.quad -15
0x5d8: f0ffffffffffffff     | 	.quad -16
0x5e0: 1100000000000000     | 	.quad 17
0x5e8: 1200000000000000     | 	.quad 18
0x5f0: 1300000000000000     | 	.quad 19
0x5f8: 1400000000000000     | 	.quad 20
0x600: 1500000000000000     | 	.quad 21
0x608: eaffffffffffffff     | 	.quad -22
0x610: 1700000000000000     | 	.quad 23
0x618: 1800000000000000     | 	.quad 24
0x620: 1900000000000000     | 	.quad 25
0x628: 1a00000000000000     | 	.quad 26
0x630: 1b00000000000000     | 	.quad 27
0x638: e4ffffffffffffff     | 	.quad -28
0x640: 1d00000000000000     | 	.quad 29
0x648: e2ffffffffffffff     | 	.quad -30
0x650: 1f00000000000000     | 	.quad 31
0x658: 2000000000000000     | 	.quad 32
0x660: dfffffffffffffff     | 	.quad -33
0x668: deffffffffffffff     | 	.quad -34
0x670: ddffffffffffffff     | 	.quad -35
0x678: dcffffffffffffff     | 	.quad -36
0x680: 2500000000000000     | 	.quad 37
0x688: daffffffffffffff     | 	.quad -38
0x690: d9ffffffffffffff     | 	.quad -39
0x698: 2800000000000000     | 	.quad 40
0x6a0: d7ffffffffffffff     | 	.quad -41
0x6a8: 2a00000000000000     | 	.quad 42
0x6b0: d5ffffffffffffff     | 	.quad -43
0x6b8: d4ffffffffffffff     | 	.quad -44
0x6c0: 2d00000000000000     | 	.quad 45
0x6c8: 2e00000000000000     | 	.quad 46
0x6d0: 2f00000000000000     | 	.quad 47
0x6d8: d0ffffffffffffff     | 	.quad -48
0x6e0: 3100000000000000     | 	.quad 49
0x6e8: 3200000000000000     | 	.quad 50
0x6f0: cdffffffffffffff     | 	.quad -51
0x6f8: ccffffffffffffff     | 	.quad -52
0x700: 3500000000000000     | 	.quad 53
0x708: caffffffffffffff     | 	.quad -54
0x710: c9ffffffffffffff     | 	.quad -55
0x718: 3800000000000000     | 	.quad 56
0x720: c7ffffffffffffff     | 	.quad -57
0x728: c6ffffffffffffff     | 	.quad -58
0x730: 3b00000000000000     | 	.quad 59
0x738: 3c00000000000000     | 	.quad 60
0x740: 3d00000000000000     | 	.quad 61
0x748: c2ffffffffffffff     | 	.quad -62
0x750: 3f00000000000000     | 	.quad 63
0x758: c0ffffffffffffff     | 	.quad -64
0x760: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x770:                      | 	.align 16
0x770:                      | Predest:
0x770: fadebc0000000000     | 	.quad 0xbcdefa
0x778:                      | dest:
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800: abefcd0000000000     | 	.quad 0xcdefab
0x808: abefcd0000000000     | 	.quad 0xcdefab
0x810: abefcd0000000000     | 	.quad 0xcdefab
0x818: abefcd0000000000     | 	.quad 0xcdefab
0x820: abefcd0000000000     | 	.quad 0xcdefab
0x828: abefcd0000000000     | 	.quad 0xcdefab
0x830: abefcd0000000000     | 	.quad 0xcdefab
0x838: abefcd0000000000     | 	.quad 0xcdefab
0x840: abefcd0000000000     | 	.quad 0xcdefab
0x848: abefcd0000000000     | 	.quad 0xcdefab
0x850: abefcd0000000000     | 	.quad 0xcdefab
0x858: abefcd0000000000     | 	.quad 0xcdefab
0x860: abefcd0000000000     | 	.quad 0xcdefab
0x868: abefcd0000000000     | 	.quad 0xcdefab
0x870: abefcd0000000000     | 	.quad 0xcdefab
0x878: abefcd0000000000     | 	.quad 0xcdefab
0x880: abefcd0000000000     | 	.quad 0xcdefab
0x888: abefcd0000000000     | 	.quad 0xcdefab
0x890: abefcd0000000000     | 	.quad 0xcdefab
0x898: abefcd0000000000     | 	.quad 0xcdefab
0x8a0: abefcd0000000000     | 	.quad 0xcdefab
0x8a8: abefcd0000000000     | 	.quad 0xcdefab
0x8b0: abefcd0000000000     | 	.quad 0xcdefab
0x8b8: abefcd0000000000     | 	.quad 0xcdefab
0x8c0: abefcd0000000000     | 	.quad 0xcdefab
0x8c8: abefcd0000000000     | 	.quad 0xcdefab
0x8d0: abefcd0000000000     | 	.quad 0xcdefab
0x8d8: abefcd0000000000     | 	.quad 0xcdefab
0x8e0: abefcd0000000000     | 	.quad 0xcdefab
0x8e8: abefcd0000000000     | 	.quad 0xcdefab
0x8f0: abefcd0000000000     | 	.quad 0xcdefab
0x8f8: abefcd0000000000     | 	.quad 0xcdefab
0x900: abefcd0000000000     | 	.quad 0xcdefab
0x908: abefcd0000000000     | 	.quad 0xcdefab
0x910: abefcd0000000000     | 	.quad 0xcdefab
0x918: abefcd0000000000     | 	.quad 0xcdefab
0x920: abefcd0000000000     | 	.quad 0xcdefab
0x928: abefcd0000000000     | 	.quad 0xcdefab
0x930: abefcd0000000000     | 	.quad 0xcdefab
0x938: abefcd0000000000     | 	.quad 0xcdefab
0x940: abefcd0000000000     | 	.quad 0xcdefab
0x948: abefcd0000000000     | 	.quad 0xcdefab
0x950: abefcd0000000000     | 	.quad 0xcdefab
0x958: abefcd0000000000     | 	.quad 0xcdefab
0x960: abefcd0000000000     | 	.quad 0xcdefab
0x968: abefcd0000000000     | 	.quad 0xcdefab
0x970: abefcd0000000000     | 	.quad 0xcdefab
0x978:                      | Postdest:
0x978: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x980:                      | .align 8
                            | # Run time stack
0x980: 0000000000000000     | 	.quad 0
0x988: 0000000000000000     | 	.quad 0
0x990: 0000000000000000     | 	.quad 0
0x998: 0000000000000000     | 	.quad 0
0x9a0: 0000000000000000     | 	.quad 0
0x9a8: 0000000000000000     | 	.quad 0
0x9b0: 0000000000000000     | 	.quad 0
0x9b8: 0000000000000000     | 	.quad 0
0x9c0: 0000000000000000     | 	.quad 0
0x9c8: 0000000000000000     | 	.quad 0
0x9d0: 0000000000000000     | 	.quad 0
0x9d8: 0000000000000000     | 	.quad 0
0x9e0: 0000000000000000     | 	.quad 0
0x9e8: 0000000000000000     | 	.quad 0
0x9f0: 0000000000000000     | 	.quad 0
0x9f8: 0000000000000000     | 	.quad 0
                            | 
0xa00:                      | Stack:
