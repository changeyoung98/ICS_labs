#######################################################################
# Test for copying block of size 64;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $64, %rdx		# src and dst have 64 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#Chen Zhiyang 516030910347
# Describe how and why you modified the baseline code.
#1.Use loop unrolling by a step of 10 to both improve CPE and satisfy the limit of bytes
#2.Use jump table to deal with the rest(I tried to reuse the codes in loop , but some instructions can't be reduced)
#3.Move the check for 0 at the header to jump table to achieve better average score(in this way, though there are more cycles for 0,cycles for others are reduced) 
#4.In the loops, rearrange the mrmovq(put several together) to reduce load/use penalty
#5.Use new function iaddq to reduce cycles
#6.Rearrange conditional jumps to jump more correctly
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
         xorq %rax,%rax  
         iaddq $-10,%rdx
        #andq %rdx,%rdx          # len <= 0?
         jl Less                # if so, goto Loop:

Loop7:   mrmovq 72(%rdi), %r10     # read val from src...
        mrmovq 64(%rdi), %r11
        mrmovq 56(%rdi), %r8
        rmmovq %r10, 72(%rsi)     # ...and store it to dst
        andq %r10, %r10
        jle Loop8               # if so, goto Npos:
        iaddq $1, %rax          # count++ 
Loop8: # mrmovq 64(%rdi), %r11     # read val from src...
        rmmovq %r11, 64(%rsi)     # ...and store it to dst
        andq %r11, %r11         # val <= 0?
        jle Loop9                # if so, goto Npos:
        iaddq $1, %rax         # count++
Loop9:  # mrmovq 56(%rdi), %r8     # read val from src...
        mrmovq 48(%rdi), %r9     # read val from src...
        mrmovq 40(%rdi), %r10     # read val from src...
        rmmovq %r8, 56(%rsi)     # ...and store it to dst
        mrmovq 32(%rdi), %r11     # read val from src...
        andq %r8, %r8         # val <= 0?
        jle Loop10               # if so, goto
        iaddq $1, %rax          # count++
Loop10:# mrmovq 48(%rdi), %r9     # read val from src...
        rmmovq %r9, 48(%rsi)     # ...and store it to dst
        andq %r9, %r9         # val <= 0?
        jle Loop11                # if so, goto Npos:
        iaddq $1, %rax         # count++
Loop11: #mrmovq 40(%rdi), %r10     # read val from src...
        #iaddq $16, %rdi         # src++  #mov from else where
        rmmovq %r10, 40(%rsi)     # ...and store it to dst
        andq %r10, %r10         # val <= 0?
        jle Loop12               # if so, goto Npos:
        iaddq $1, %rax          # count++
Loop12: #mrmovq 32(%rdi), %r11     # read val from src...
        rmmovq %r11, 32(%rsi)     # ...and store it to dst
        andq %r11, %r11         # val <= 0?
        jle Loop13                # if so, goto Npos:
        iaddq $1, %rax         # count++
Loop13:   mrmovq 24(%rdi), %r8     # read val from src...
        mrmovq 16(%rdi), %r9     # read val  from src...
          mrmovq 8(%rdi), %r10     # read val from src...
       # iaddq $16, %rdi         # src++  #mov from else where
        rmmovq %r8, 24(%rsi)     # ...and store it to dst
        mrmovq (%rdi), %r11     # read val from src...
        andq %r8, %r8         # val <= 0?
        jle Loop14               # if so, goto Npos:
        iaddq $1, %rax          # count++
Loop14:# mrmovq 16(%rdi), %r9     # read val from src... 
        rmmovq %r9, 16(%rsi)     # ...and store it to dst
        andq %r9, %r9         # val <= 0?
        jle Loop15                # if so, goto Npos:
        iaddq $1, %rax         # count++
Loop15: #mrmovq 8(%rdi), %r10     # read val from src...
        #iaddq $16, %rdi         # src++  #mov from else where
        rmmovq %r10, 8(%rsi)     # ...and store it to dst
        andq %r10, %r10         # val <= 0?
        jle Loop16               # if so, goto Npos:
        iaddq $1, %rax          # count++
Loop16: #mrmovq (%rdi), %r11     # read val from src...
        rmmovq %r11, (%rsi)     # ...and store it to dst
        andq %r11, %r11         # val <= 0?
        jle Npos                # if so, goto Npos:
        iaddq $1, %rax         # count++

Npos:  
        iaddq $80, %rdi
        iaddq $80, %rsi         # dst++ #move from that

        iaddq $-10,%rdx
        #andq %rdx,%rdx          # len <= 0?
        jge Loop7                # if so, goto Loop:
Less:   addq %rdx,%rdx
        addq %rdx,%rdx
        addq %rdx,%rdx
        mrmovq JT(%rdx),%rdx
        pushq %rdx
        ret
T000:

T00:    mrmovq 64(%rdi), %r10
        rmmovq %r10, 64(%rsi)
        andq %r10,%r10
        jle T0
        iaddq $1, %rax

T0:     mrmovq 56(%rdi), %r10
        rmmovq %r10, 56(%rsi)
        andq %r10,%r10
        jle T1
        iaddq $1, %rax
        
T1:     mrmovq 48(%rdi), %r10
        rmmovq %r10, 48(%rsi)
        andq %r10,%r10
        jle T2
        iaddq $1, %rax
T2:     mrmovq 40(%rdi),%r10
        rmmovq %r10, 40(%rsi)
        andq %r10,%r10
        jle T3
        iaddq $1, %rax 
T3:     mrmovq 32(%rdi), %r10
        rmmovq %r10, 32(%rsi)
        andq %r10,%r10
        jle T4
        iaddq $1, %rax
T4:     mrmovq 24(%rdi), %r10
        rmmovq %r10, 24(%rsi)
        andq %r10,%r10
        jle T5
        iaddq $1, %rax
T5:     mrmovq 16(%rdi), %r9
        rmmovq %r9, 16(%rsi)
        andq %r9,%r9
        jle T6
        iaddq $1, %rax
T6:     mrmovq 8(%rdi), %r10
        rmmovq %r10, 8(%rsi)
        andq %r10,%r10
        jle T7
        iaddq $1, %rax
T7:     mrmovq (%rdi), %r10
        rmmovq %r10, (%rsi)
        andq %r10,%r10
        jle Done
        iaddq $1, %rax
        jmp Done

.align 8
     .quad Done
     .quad T7
     .quad T6
     .quad T5
     .quad T4
     .quad T3
     .quad T2
     .quad T1
     .quad T0
     .quad T00
JT:  .quad Done
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 36.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $36,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $64,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad 3
	.quad -4
	.quad -5
	.quad -6
	.quad 7
	.quad 8
	.quad 9
	.quad 10
	.quad 11
	.quad 12
	.quad -13
	.quad -14
	.quad -15
	.quad -16
	.quad 17
	.quad 18
	.quad 19
	.quad 20
	.quad 21
	.quad -22
	.quad 23
	.quad 24
	.quad 25
	.quad 26
	.quad 27
	.quad -28
	.quad 29
	.quad -30
	.quad 31
	.quad 32
	.quad -33
	.quad -34
	.quad -35
	.quad -36
	.quad 37
	.quad -38
	.quad -39
	.quad 40
	.quad -41
	.quad 42
	.quad -43
	.quad -44
	.quad 45
	.quad 46
	.quad 47
	.quad -48
	.quad 49
	.quad 50
	.quad -51
	.quad -52
	.quad 53
	.quad -54
	.quad -55
	.quad 56
	.quad -57
	.quad -58
	.quad 59
	.quad 60
	.quad 61
	.quad -62
	.quad 63
	.quad -64
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
